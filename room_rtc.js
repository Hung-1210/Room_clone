// ID ·ª©ng d·ª•ng Agora
const APP_ID = "e57fc255c15b4ef9b782b2f419ee000c"

let uid = sessionStorage.getItem('uid')
// N·∫øu kh√¥ng c√≥ UID th√¨ t·∫°o UID ng·∫´u nhi√™n v√† l∆∞u v√†o session storage
if(!uid){
    uid = String(Math.floor(Math.random() * 10000))
    sessionStorage.setItem('uid', uid)
}

let token = null;
let client;
// const { ipcRenderer } = require('electron');
let rtmClient;
let channel;

// L·∫•y th√¥ng tin ph√≤ng t·ª´ URL
const queryString = window.location.search
const urlParams = new URLSearchParams(queryString)
let roomId = urlParams.get('room')

// N·∫øu kh√¥ng c√≥ roomId, ƒë·∫∑t t√™n ph√≤ng m·∫∑c ƒë·ªãnh l√† 'main'
if(!roomId){
    roomId = 'main'
}

// L·∫•y t√™n hi·ªÉn th·ªã t·ª´ session storage, n·∫øu kh√¥ng c√≥ s·∫Ω quay l·∫°i trang lobby
let displayName = sessionStorage.getItem('display_name')
if(!displayName){
    window.location = 'lobby.html'
}

let localTracks = []
let remoteUsers = {}

let localScreenTracks;
let sharingScreen = false;

// Kh·ªüi t·∫°o tham gia ph√≤ng
let joinRoomInit = async () => {
    rtmClient = await AgoraRTM.createInstance(APP_ID)
    await rtmClient.login({uid,token})  // T·∫°o instance RTM v√† ƒëƒÉng nh·∫≠p

     // L∆∞u t√™n hi·ªÉn th·ªã ng∆∞·ªùi d√πng v√†o thu·ªôc t√≠nh RTM
    await rtmClient.addOrUpdateLocalUserAttributes({'name':displayName})  // C·∫≠p nh·∫≠t t√™n hi·ªÉn th·ªã ng∆∞·ªùi d√πng

     // T·∫°o v√† tham gia k√™nh RTM
    channel = await rtmClient.createChannel(roomId)
    await channel.join()

     // L·∫Øng nghe c√°c s·ª± ki·ªán trong k√™nh
    channel.on('MemberJoined', handleMemberJoined)
    channel.on('MemberLeft', handleMemberLeft)
    channel.on('ChannelMessage', handleChannelMessage)

    // L·∫•y danh s√°ch th√†nh vi√™n v√† g·ª≠i th√¥ng b√°o bot
    getMembers()
    addBotMessageToDom(`Welcome to the room ${displayName}! üëã`)

     // Kh·ªüi t·∫°o client RTC (WebRTC)
    client = AgoraRTC.createClient({mode:'rtc', codec:'vp8'})
    await client.join(APP_ID, roomId, token, uid)

    // L·∫Øng nghe s·ª± ki·ªán ng∆∞·ªùi d√πng xu·∫•t b·∫£n ho·∫∑c r·ªùi ph√≤ng
    client.on('user-published', handleUserPublished)
    client.on('user-left', handleUserLeft)
}


// Tham gia lu·ªìng video v√† √¢m thanh
let joinStream = async () => {
    document.getElementById('join-btn').style.display = 'none'
    document.getElementsByClassName('stream__actions')[0].style.display = 'flex'

     // Kh·ªüi t·∫°o lu·ªìng camera v√† micro
    localTracks = await AgoraRTC.createMicrophoneAndCameraTracks({}, {encoderConfig:{
        width:{min:640, ideal:1920, max:1920},
        height:{min:480, ideal:1080, max:1080}
    }})

    // T·∫°o khung video cho ng∆∞·ªùi d√πng
    let player = `<div class="video__container" id="user-container-${uid}">
                    <div class="video-player" id="user-${uid}"></div>
                 </div>`

    document.getElementById('streams__container').insertAdjacentHTML('beforeend', player)
    document.getElementById(`user-container-${uid}`).addEventListener('click', expandVideoFrame)

    // Ph√°t video t·ª´ camera
    localTracks[1].play(`user-${uid}`)
    await client.publish([localTracks[0], localTracks[1]])
}

// Chuy·ªÉn ƒë·ªïi gi·ªØa camera v√† m√†n h√¨nh
let switchToCamera = async () => {
    let player = `<div class="video__container" id="user-container-${uid}">
                    <div class="video-player" id="user-${uid}"></div>
                 </div>`
    displayFrame.insertAdjacentHTML('beforeend', player)

    await localTracks[0].setMuted(true)
    await localTracks[1].setMuted(true)

    document.getElementById('mic-btn').classList.remove('active')
    document.getElementById('screen-btn').classList.remove('active')

    localTracks[1].play(`user-${uid}`)
    await client.publish([localTracks[1]])
}

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng kh√°c xu·∫•t b·∫£n video ho·∫∑c audio
let handleUserPublished = async (user, mediaType) => {
    remoteUsers[user.uid] = user

    await client.subscribe(user, mediaType)

    let player = document.getElementById(`user-container-${user.uid}`)
    if(player === null){
        player = `<div class="video__container" id="user-container-${user.uid}">
                <div class="video-player" id="user-${user.uid}"></div>
            </div>`

        document.getElementById('streams__container').insertAdjacentHTML('beforeend', player)
        document.getElementById(`user-container-${user.uid}`).addEventListener('click', expandVideoFrame)
   
    }

    if(displayFrame.style.display){
        let videoFrame = document.getElementById(`user-container-${user.uid}`)
        videoFrame.style.height = '100px'
        videoFrame.style.width = '100px'
    }

    if(mediaType === 'video'){
        user.videoTrack.play(`user-${user.uid}`)
    }

    if(mediaType === 'audio'){
        user.audioTrack.play()
    }

}

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng kh√°c r·ªùi ph√≤ng
let handleUserLeft = async (user) => {
    delete remoteUsers[user.uid]
    let item = document.getElementById(`user-container-${user.uid}`)
    if(item){
        item.remove()
    }

    // ƒê·∫∑t l·∫°i k√≠ch th∆∞·ªõc c√°c khung video khi c√≥ ng∆∞·ªùi r·ªùi ƒëi
    if(userIdInDisplayFrame === `user-container-${user.uid}`){
        displayFrame.style.display = null
        
        let videoFrames = document.getElementsByClassName('video__container')

        for(let i = 0; videoFrames.length > i; i++){
            videoFrames[i].style.height = '300px'
            videoFrames[i].style.width = '300px'
        }
    }
}

// B·∫≠t/t·∫Øt micro
let toggleMic = async (e) => {
    let button = e.currentTarget

    if(localTracks[0].muted){
        await localTracks[0].setMuted(false)
        button.classList.add('active')
    }else{
        await localTracks[0].setMuted(true)
        button.classList.remove('active')
    }
}

// B·∫≠t/t·∫Øt camera
let toggleCamera = async (e) => {
    let button = e.currentTarget

    if(localTracks[1].muted){
        await localTracks[1].setMuted(false)
        button.classList.add('active')
    }else{
        await localTracks[1].setMuted(true)
        button.classList.remove('active')
    }
}

// B·∫≠t/t·∫Øt chia s·∫ª m√†n h√¨nh
let toggleScreen = async (e) => {
    let screenButton = e.currentTarget
    let cameraButton = document.getElementById('camera-btn')

    if(!sharingScreen){
        sharingScreen = true

        screenButton.classList.add('active')
        cameraButton.classList.remove('active')
        cameraButton.style.display = 'none'

        localScreenTracks = await AgoraRTC.createScreenVideoTrack()

        // // L·∫•y ngu·ªìn m√†n h√¨nh t·ª´ Electron th√¥ng qua desktopCapturer
        // const sources = await require('electron').invoke('get-screen-sources');

        // // Gi·∫£ s·ª≠ ch·ªçn m√†n h√¨nh ƒë·∫ßu ti√™n ƒë·ªÉ chia s·∫ª
        // const screenSourceId = sources[0].id;

        // // T·∫°o video track t·ª´ m√†n h√¨nh chia s·∫ª
        // localScreenTracks = await AgoraRTC.createScreenVideoTrack({
        //     screenSourceId: screenSourceId
        // });

        // Thay th·∫ø video t·ª´ camera b·∫±ng m√†n h√¨nh chia s·∫ª
        document.getElementById(`user-container-${uid}`).remove()
        displayFrame.style.display = 'block'

        let player = `<div class="video__container" id="user-container-${uid}">
                <div class="video-player" id="user-${uid}"></div>
            </div>`

        displayFrame.insertAdjacentHTML('beforeend', player)
        document.getElementById(`user-container-${uid}`).addEventListener('click', expandVideoFrame)

        userIdInDisplayFrame = `user-container-${uid}`
        localScreenTracks.play(`user-${uid}`)

        await client.unpublish([localTracks[1]])
        await client.publish([localScreenTracks])

        let videoFrames = document.getElementsByClassName('video__container')
        for(let i = 0; videoFrames.length > i; i++){
            if(videoFrames[i].id != userIdInDisplayFrame){
              videoFrames[i].style.height = '100px'
              videoFrames[i].style.width = '100px'
            }
          }


    }else{
        sharingScreen = false 
        cameraButton.style.display = 'block'
        document.getElementById(`user-container-${uid}`).remove()
        await client.unpublish([localScreenTracks])

        switchToCamera()
    }
}


// Tho√°t kh·ªèi ph√≤ng v√† ng·ª´ng ph√°t s√≥ng
let leaveStream = async (e) => {
    e.preventDefault()

    document.getElementById('join-btn').style.display = 'block'
    document.getElementsByClassName('stream__actions')[0].style.display = 'none'

     // D·ª´ng v√† ƒë√≥ng t·∫•t c·∫£ c√°c lu·ªìng ƒë·ªãa ph∆∞∆°ng
    for(let i = 0; localTracks.length > i; i++){
        localTracks[i].stop()
        localTracks[i].close()
    }

    await client.unpublish([localTracks[0], localTracks[1]])

    if(localScreenTracks){
        await client.unpublish([localScreenTracks])
    }

    document.getElementById(`user-container-${uid}`).remove()

    if(userIdInDisplayFrame === `user-container-${uid}`){
        displayFrame.style.display = null

        for(let i = 0; videoFrames.length > i; i++){
            videoFrames[i].style.height = '300px'
            videoFrames[i].style.width = '300px'
        }
    }

    channel.sendMessage({text:JSON.stringify({'type':'user_left', 'uid':uid})})
}

document.getElementById('camera-btn').addEventListener('click', toggleCamera)
document.getElementById('mic-btn').addEventListener('click', toggleMic)
document.getElementById('screen-btn').addEventListener('click', toggleScreen)
document.getElementById('join-btn').addEventListener('click', joinStream)
document.getElementById('leave-btn').addEventListener('click', leaveStream)


joinRoomInit()

